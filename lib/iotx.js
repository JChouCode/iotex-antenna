"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Iotx = void 0;

var _accounts = require("./account/accounts");

var _utils = require("./account/utils");

var _method = require("./action/method");

var _contract = require("./contract/contract");

var _rpcMethod = _interopRequireDefault(require("./rpc-method"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

class Iotx extends _rpcMethod.default {
  constructor(hostname) {
    super(hostname);

    _defineProperty(this, "accounts", void 0);

    this.accounts = new _accounts.Accounts(this);
  }

  currentProvider() {
    return this.client;
  }

  sendTransfer(req) {
    const sender = this.accounts.getAccount(req.from);

    if (!sender) {
      throw new Error(`can not found account: ${req.from}`);
    }

    const price = req.gasPrice
      ? (0, _utils.toRau)(String(req.gasPrice), "Qev")
      : undefined;
    const payload = req.payload || "";
    return new _method.TransferMethod(this, sender, {
      gasLimit: req.gasLimit,
      gasPrice: price,
      amount: req.value,
      recipient: req.to,
      payload: payload
    }).execute();
  } // return action hash

  deployContract(
    req, // @ts-ignore
    ...args
  ) {
    const sender = this.accounts.getAccount(req.from);

    if (!sender) {
      throw new Error(`can not found account: ${req.from}`);
    }

    const price = req.gasPrice
      ? (0, _utils.toRau)(String(req.gasPrice), "Qev")
      : undefined;
    return new _contract.Contract(JSON.parse(req.abi), undefined, {
      data: req.data,
      provider: this
    }).deploy(sender, args, req.gasLimit, price);
  } // return action hash

  executeContract(
    req, // @ts-ignore
    ...args
  ) {
    const sender = this.accounts.getAccount(req.from);

    if (!sender) {
      throw new Error(`can not found account: ${req.from}`);
    }

    const price = req.gasPrice
      ? (0, _utils.toRau)(String(req.gasPrice), "Qev")
      : undefined;
    const contract = new _contract.Contract(
      JSON.parse(req.abi),
      req.contractAddress,
      {
        provider: this
      }
    );
    return contract.methods[req.method](...args, {
      account: sender,
      amount: req.amount,
      gasLimit: req.gasLimit,
      gasPrice: price
    });
  }

  async readContractByMethod(
    req, // @ts-ignore
    ...args
  ) {
    const contract = new _contract.Contract(
      JSON.parse(req.abi),
      req.contractAddress,
      {
        provider: this
      }
    );
    const result = await this.readContract({
      execution: contract.pureEncodeMethod("0", req.method, ...args),
      callerAddress: req.from
    });
    return result.data;
  }

  async claimFromRewardingFund(req) {
    const sender = this.accounts.getAccount(req.from);

    if (!sender) {
      throw new Error(`can not found account: ${req.from}`);
    }

    const price = req.gasPrice
      ? (0, _utils.toRau)(String(req.gasPrice), "Qev")
      : undefined;
    return new _method.ClaimFromRewardingFundMethod(this, sender, {
      gasLimit: req.gasLimit,
      gasPrice: price,
      amount: req.amount,
      data: req.data
    }).execute();
  }
}

exports.Iotx = Iotx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
