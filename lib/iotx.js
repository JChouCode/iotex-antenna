"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Iotx = void 0;

var _accounts = require("./account/accounts");

var _method = require("./action/method");

var _contract = require("./contract/contract");

var _rpcMethod = _interopRequireDefault(require("./rpc-method"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

class Iotx extends _rpcMethod.default {
  constructor(hostname, opts) {
    super(hostname);

    _defineProperty(this, "accounts", void 0);

    _defineProperty(this, "signer", void 0);

    this.accounts = new _accounts.Accounts(this);
    this.signer = opts && opts.signer;
  }

  async tryGetAccount(address) {
    const sender =
      this.signer && this.signer.getAccount
        ? await this.signer.getAccount(address)
        : this.accounts.getAccount(address);

    if (!sender) {
      throw new Error(`cannot find account: ${address}`);
    }

    return sender;
  }

  currentProvider() {
    return this.client;
  }

  async sendTransfer(req) {
    const sender = await this.tryGetAccount(req.from);
    const payload = req.payload || "";
    return new _method.TransferMethod(
      this,
      sender,
      {
        gasLimit: req.gasLimit,
        gasPrice: req.gasPrice,
        amount: req.value,
        recipient: req.to,
        payload: payload
      },
      {
        signer: this.signer
      }
    ).execute();
  } // return action hash

  async deployContract(req, ...args) {
    const sender = await this.tryGetAccount(req.from);
    return new _contract.Contract(JSON.parse(req.abi), undefined, {
      data: req.data,
      provider: this,
      signer: this.signer
    }).deploy(sender, args, req.gasLimit, req.gasPrice);
  } // return action hash

  async executeContract(req, ...args) {
    const sender = await this.tryGetAccount(req.from);
    const contract = new _contract.Contract(
      JSON.parse(req.abi),
      req.contractAddress,
      {
        provider: this,
        signer: this.signer
      }
    );
    return contract.methods[req.method](...args, {
      account: sender,
      amount: req.amount,
      gasLimit: req.gasLimit,
      gasPrice: req.gasPrice
    });
  }

  async readContractByMethod(req, ...args) {
    const contract = new _contract.Contract(
      JSON.parse(req.abi),
      req.contractAddress,
      {
        provider: this,
        signer: this.signer
      }
    );
    const result = await this.readContract({
      execution: contract.pureEncodeMethod("0", req.method, ...args),
      callerAddress: req.from
    });
    return contract.decodeMethodResult(req.method, result.data);
  }

  async claimFromRewardingFund(req) {
    const sender = await this.tryGetAccount(req.from);
    return new _method.ClaimFromRewardingFundMethod(
      this,
      sender,
      {
        gasLimit: req.gasLimit,
        gasPrice: req.gasPrice,
        amount: req.amount,
        data: req.data
      },
      {
        signer: this.signer
      }
    ).execute();
  }
}

exports.Iotx = Iotx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
