"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClaimFromRewardingFundMethod = exports.ExecutionMethod = exports.TransferMethod = exports.AbstractMethod = void 0;

var _envelop = require("./envelop");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

class AbstractMethod {
  constructor(client, account) {
    _defineProperty(this, "client", void 0);

    _defineProperty(this, "account", void 0);

    this.client = client;
    this.account = account;
  }

  async baseEnvelop(gasLimit, gasPrice) {
    const meta = await this.client.getAccount({
      address: this.account.address
    });
    return new _envelop.Envelop(
      1, // @ts-ignore
      String(meta.accountMeta.pendingNonce),
      gasLimit,
      gasPrice
    );
  }

  async signAction(envelop) {
    if (!envelop.gasPrice) {
      const price = await this.client.suggestGasPrice({});
      envelop.gasPrice = String(price.gasPrice);
    }

    if (!envelop.gasLimit) {
      const selp = await _envelop.SealedEnvelop.sign(this.account, envelop);
      const limit = await this.client.estimateGasForAction({
        action: selp.action()
      });
      envelop.gasLimit = limit.gas;
    }

    return _envelop.SealedEnvelop.sign(this.account, envelop);
  }

  async sendAction(envelop) {
    const selp = await this.signAction(envelop);
    await this.client.sendAction({
      action: selp.action()
    });
    return selp.hash();
  }
}

exports.AbstractMethod = AbstractMethod;

class TransferMethod extends AbstractMethod {
  constructor(client, account, transfer) {
    super(client, account);

    _defineProperty(this, "transfer", void 0);

    this.transfer = transfer;
  }

  async execute() {
    const envelop = await this.baseEnvelop(
      this.transfer.gasLimit,
      this.transfer.gasPrice
    );
    envelop.transfer = {
      amount: this.transfer.amount,
      recipient: this.transfer.recipient,
      payload: Buffer.from(this.transfer.payload, "hex")
    };
    return this.sendAction(envelop);
  }
}

exports.TransferMethod = TransferMethod;

class ExecutionMethod extends AbstractMethod {
  constructor(client, account, execution) {
    super(client, account);

    _defineProperty(this, "execution", void 0);

    this.execution = execution;
  }

  async execute() {
    const envelop = await this.baseEnvelop(
      this.execution.gasLimit,
      this.execution.gasPrice
    );
    envelop.execution = {
      amount: this.execution.amount,
      contract: this.execution.contract,
      data: this.execution.data
    };
    return this.sendAction(envelop);
  }

  async sign() {
    const envelop = await this.baseEnvelop(
      this.execution.gasLimit,
      this.execution.gasPrice
    );
    envelop.execution = {
      amount: this.execution.amount,
      contract: this.execution.contract,
      data: this.execution.data
    };
    const selp = await this.signAction(envelop);
    return selp.action();
  }
}

exports.ExecutionMethod = ExecutionMethod;

class ClaimFromRewardingFundMethod extends AbstractMethod {
  constructor(client, account, claim) {
    super(client, account);

    _defineProperty(this, "claimFronRewardFund", void 0);

    this.claimFronRewardFund = claim;
  }

  async execute() {
    const envelop = await this.baseEnvelop(
      this.claimFronRewardFund.gasLimit,
      this.claimFronRewardFund.gasPrice
    );
    envelop.claimFromRewardingFund = {
      amount: this.claimFronRewardFund.amount,
      data: this.claimFronRewardFund.data
    };
    return this.sendAction(envelop);
  }

  async sign() {
    const envelop = await this.baseEnvelop(
      this.claimFronRewardFund.gasLimit,
      this.claimFronRewardFund.gasPrice
    );
    envelop.claimFromRewardingFund = {
      amount: this.claimFronRewardFund.amount,
      data: this.claimFronRewardFund.data
    };
    const selp = await this.signAction(envelop);
    return selp.action();
  }
}

exports.ClaimFromRewardingFundMethod = ClaimFromRewardingFundMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
