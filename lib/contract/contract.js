"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Contract = void 0;

var _ethereumjsAbi = _interopRequireDefault(require("ethereumjs-abi"));

var _method = require("../action/method");

var _address = require("../crypto/address");

var _abiToByte = require("./abi-to-byte");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

class Contract {
  // The json interface for the contract to instantiate
  // This address is necessary for executions and call requests
  // The options of the contract.
  setProvider(provider) {
    this.provider = provider;
  }

  constructor(jsonInterface, address, options) { // tslint:disable-next-line: no-any
    _defineProperty(this, "abi", void 0);

    _defineProperty(this, "address", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "provider", void 0);

    _defineProperty(this, "methods", void 0);

    this.provider = options && options.provider;

    if (jsonInterface) {
      this.abi = (0, _abiToByte.getAbiFunctions)(jsonInterface);
    }

    this.address = address;
    this.options = options; // mount methods

    this.methods = {}; // tslint:disable-next-line: no-for-in

    for (const func in this.abi) {
      if (!this.abi.hasOwnProperty(func)) {
        // eslint-disable-next-line no-continue
        continue;
      }

      this.methods[func] = async (
        // @ts-ignore
        ...args
      ) => {
        if (!this.address || !this.abi) {
          throw new Error("must set contract address and abi");
        }

        if (args.length < 1) {
          throw new Error("must set method execute parameter");
        }

        if (!this.provider) {
          throw new Error("no rpc method provider specified");
        }

        const executeParameter = args[args.length - 1];
        const abiFunc = this.abi[func];
        const userInput = {};

        if (!abiFunc.inputs || !Array.isArray(abiFunc.inputs)) {
          return userInput;
        } // tslint:disable-next-line: no-any

        abiFunc.inputs.map((val, i) => {
          // @ts-ignore
          userInput[val.name] = args[i];
        });

        if (abiFunc.stateMutability === "view") {
          const result = await this.provider.readContract({
            execution: this.pureEncodeMethod(
              "0",
              func,
              ...args.slice(1, args.length)
            ),
            callerAddress: this.address
          });
          return this.decodeMethodResult(func, result.data);
        }

        const methodEnvelop = this.encodeMethod(
          executeParameter.amount || "0",
          func,
          userInput,
          executeParameter.gasLimit,
          executeParameter.gasPrice
        );
        const method = new _method.ExecutionMethod(
          this.provider,
          executeParameter.account,
          methodEnvelop,
          {
            signer: this.options && this.options.signer
          }
        );
        return method.execute();
      };
    }
  } // tslint:disable-next-line: no-any

  getABI() {
    return this.abi;
  }

  getAddress() {
    return this.address;
  }

  async deploy(
    account, // tslint:disable-next-line: no-any
    inputs,
    gasLimit,
    gasPrice
  ) {
    if (!this.options) {
      throw new Error("must set contract byte code");
    }

    if (!this.provider) {
      throw new Error("no rpc method provider specified");
    }

    let data = this.options.data || Buffer.from([]);

    if (this.abi && this.abi.hasOwnProperty(_abiToByte.Constructor)) {
      const abiFunc = this.abi[_abiToByte.Constructor];
      const userInput = {}; // @ts-ignore

      if (!abiFunc.inputs || !Array.isArray(abiFunc.inputs)) {
        throw new Error("construtor input error");
      } // @ts-ignore
      // tslint:disable-next-line: no-any

      abiFunc.inputs.map((val, i) => {
        // @ts-ignore
        userInput[val.name] = inputs[i];
      });
      data = Buffer.concat([
        data, // @ts-ignore
        Buffer.from(
          (0, _abiToByte.encodeArguments)(
            (0, _abiToByte.getArgTypes)(abiFunc),
            userInput
          ),
          "hex"
        )
      ]);
    }

    const contractEnvelop = {
      gasLimit: gasLimit,
      gasPrice: gasPrice,
      contract: "",
      amount: "0",
      data: data
    };
    return new _method.ExecutionMethod(
      this.provider,
      account,
      contractEnvelop,
      {
        signer: this.options && this.options.signer
      }
    ).execute();
  }

  pureEncodeMethod(
    amount,
    method, // @ts-ignore
    // tslint:disable-next-line: typedef
    ...args
  ) {
    if (!this.address || !this.abi) {
      throw new Error("must set contract address and abi");
    }

    if (!this.abi[method]) {
      throw new Error(`method ${method} dose not in abi`);
    }

    const abiFunc = this.abi[method];
    const userInput = {}; // tslint:disable-next-line: no-any

    abiFunc.inputs.map((val, i) => {
      // @ts-ignore
      userInput[val.name] = args[i];
    });
    return this.encodeMethod(amount, method, userInput);
  }

  encodeMethod(
    amount,
    method, // tslint:disable-next-line:no-any
    input,
    gasLimit,
    gasPrice
  ) {
    if (!this.address || !this.abi) {
      throw new Error("must set contract address and abi");
    }

    if (!this.abi[method]) {
      throw new Error(`method ${method} dose not in abi`);
    }

    return {
      gasLimit: gasLimit,
      gasPrice: gasPrice,
      contract: this.address,
      amount: amount,
      data: Buffer.from(
        (0, _abiToByte.encodeInputData)(this.abi, method, input),
        "hex"
      )
    };
  }

  decodeMethodResult(method, result) {
    const outTypes = []; // @ts-ignore

    this.getABI()[method].outputs.forEach(field => {
      outTypes.push(field.type);
    });

    if (outTypes.length === 0) {
      return null;
    }

    const results = _ethereumjsAbi.default.rawDecode(
      outTypes,
      Buffer.from(result, "hex")
    );

    for (let i = 0; i < outTypes.length; i++) {
      if (outTypes[i] === "address") {
        results[i] = (0, _address.fromBytes)(
          Buffer.from(results[i].toString(), "hex")
        ).string();
      }

      if (outTypes[i] === "address[]") {
        for (let j = 0; j < results[i].length; j++) {
          results[i][j] = (0, _address.fromBytes)(
            Buffer.from(results[i][j].toString(), "hex")
          ).string();
        }
      }
    }

    if (outTypes.length === 1) {
      return results[0];
    }

    return results;
  }
}

exports.Contract = Contract;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
