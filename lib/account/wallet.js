"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encrypt = encrypt;
exports.decrypt = decrypt;
exports.default = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _randombytes = _interopRequireDefault(require("randombytes"));

var _scrypt = _interopRequireDefault(require("scrypt.js"));

var _v = _interopRequireDefault(require("uuid/v4"));

var _address = require("../crypto/address");

var _crypto2 = require("../crypto/crypto");

var _hash = require("../crypto/hash");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

function runCipherBuffer(cipher, data) {
  return Buffer.concat([cipher.update(data), cipher.final()]);
}

class Wallet {
  constructor() {
    _defineProperty(this, "accounts", void 0);

    this.accounts = new Map();
  }

  add(account) {
    if (account) {
      this.accounts.set(account.address, account);
    }
  }

  get(address) {
    return this.accounts.get(address);
  }

  remove(address) {
    this.accounts.delete(address);
  }
} // ported from ethereumjs-wallet

exports.default = Wallet;

function encrypt(privateKey, password, opts = {}) {
  const account = (0, _crypto2.privateKeyToAccount)(privateKey);
  const salt = opts.salt || (0, _randombytes.default)(32);
  const iv = opts.iv || (0, _randombytes.default)(16);
  let derivedKey;
  const kdf = opts.kdf || "scrypt";
  const kdfparams = {
    dklen: opts.dklen || 32,
    salt: salt.toString("hex")
  };

  if (kdf === "pbkdf2") {
    kdfparams.c = opts.c || 262144;
    kdfparams.prf = "hmac-sha256";
    derivedKey = _crypto.default.pbkdf2Sync(
      Buffer.from(password),
      salt,
      kdfparams.c,
      kdfparams.dklen,
      "sha256"
    );
  } else if (kdf === "scrypt") {
    // FIXME: support progress reporting callback
    kdfparams.n = opts.n || 262144;
    kdfparams.r = opts.r || 8;
    kdfparams.p = opts.p || 1;
    derivedKey = (0, _scrypt.default)(
      Buffer.from(password),
      salt,
      kdfparams.n,
      kdfparams.r,
      kdfparams.p,
      kdfparams.dklen
    );
  } else {
    throw new Error("Unsupported kdf");
  }

  const cipher = _crypto.default.createCipheriv(
    opts.cipher || "aes-128-ctr",
    derivedKey.slice(0, 16),
    iv
  );

  if (!cipher) {
    throw new Error("Unsupported cipher");
  }

  const ciphertext = runCipherBuffer(cipher, Buffer.from(privateKey, "hex"));
  const mac = (0, _hash.hash256b)(
    Buffer.concat([derivedKey.slice(16, 32), ciphertext])
  );
  return {
    version: 3,
    // @ts-ignore
    id: (0, _v.default)({
      random: opts.uuid || (0, _randombytes.default)(16)
    }),
    address: String(
      (0, _address.fromString)(account.address).stringEth()
    ).replace(/^0x/, ""),
    crypto: {
      ciphertext: ciphertext.toString("hex"),
      cipherparams: {
        iv: iv.toString("hex")
      },
      cipher: opts.cipher || "aes-128-ctr",
      kdf: kdf,
      kdfparams: kdfparams,
      mac: mac.toString("hex")
    }
  };
} // ported from ethereumjs-wallet

function decrypt(privateKey, password) {
  let derivedKey;
  let kdfparams;

  if (privateKey.crypto.kdf === "scrypt") {
    kdfparams = privateKey.crypto.kdfparams; // FIXME: support progress reporting callback

    derivedKey = (0, _scrypt.default)(
      Buffer.from(password),
      Buffer.from(kdfparams.salt, "hex"),
      kdfparams.n,
      kdfparams.r,
      kdfparams.p,
      kdfparams.dklen
    );
  } else if (privateKey.crypto.kdf === "pbkdf2") {
    kdfparams = privateKey.crypto.kdfparams;

    if (kdfparams.prf !== "hmac-sha256") {
      throw new Error("Unsupported parameters to PBKDF2");
    }

    derivedKey = _crypto.default.pbkdf2Sync(
      Buffer.from(password),
      Buffer.from(kdfparams.salt, "hex"),
      kdfparams.c || 0,
      kdfparams.dklen,
      "sha256"
    );
  } else {
    throw new Error("Unsupported key derivation scheme");
  }

  const ciphertext = Buffer.from(privateKey.crypto.ciphertext, "hex");
  const mac = (0, _hash.hash256b)(
    Buffer.concat([derivedKey.slice(16, 32), ciphertext])
  );

  if (mac.toString("hex") !== privateKey.crypto.mac) {
    throw new Error("Key derivation failed - possibly wrong passphrase");
  }

  const decipher = _crypto.default.createDecipheriv(
    privateKey.crypto.cipher,
    derivedKey.slice(0, 16),
    Buffer.from(privateKey.crypto.cipherparams.iv, "hex")
  );

  const seed = runCipherBuffer(decipher, ciphertext);
  return (0, _crypto2.privateKeyToAccount)(seed.toString("hex"));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
