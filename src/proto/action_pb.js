/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.iproto.ActionPb', null, global);
goog.exportSymbol('proto.iproto.ClaimFromRewardingFund', null, global);
goog.exportSymbol('proto.iproto.CreateDepositPb', null, global);
goog.exportSymbol('proto.iproto.CreatePlumChainPb', null, global);
goog.exportSymbol('proto.iproto.DepositToRewardingFund', null, global);
goog.exportSymbol('proto.iproto.ExecutionPb', null, global);
goog.exportSymbol('proto.iproto.GrantReward', null, global);
goog.exportSymbol('proto.iproto.LogPb', null, global);
goog.exportSymbol('proto.iproto.MerkleRoot', null, global);
goog.exportSymbol('proto.iproto.PlumChallengeExit', null, global);
goog.exportSymbol('proto.iproto.PlumCreateDepositPb', null, global);
goog.exportSymbol('proto.iproto.PlumFinalizeExit', null, global);
goog.exportSymbol('proto.iproto.PlumPutBlockPb', null, global);
goog.exportSymbol('proto.iproto.PlumResponseChallengeExit', null, global);
goog.exportSymbol('proto.iproto.PlumSettleDepositPb', null, global);
goog.exportSymbol('proto.iproto.PlumStartExitPb', null, global);
goog.exportSymbol('proto.iproto.PlumTransferPb', null, global);
goog.exportSymbol('proto.iproto.PutBlockPb', null, global);
goog.exportSymbol('proto.iproto.ReceiptPb', null, global);
goog.exportSymbol('proto.iproto.RewardType', null, global);
goog.exportSymbol('proto.iproto.SetReward', null, global);
goog.exportSymbol('proto.iproto.SettleDepositPb', null, global);
goog.exportSymbol('proto.iproto.StartSubChainPb', null, global);
goog.exportSymbol('proto.iproto.StopSubChainPb', null, global);
goog.exportSymbol('proto.iproto.TerminatePlumChainPb', null, global);
goog.exportSymbol('proto.iproto.TransferPb', null, global);
goog.exportSymbol('proto.iproto.VotePb', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.TransferPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.TransferPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.TransferPb.displayName = 'proto.iproto.TransferPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.TransferPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.TransferPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.TransferPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.TransferPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    recipient: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.TransferPb}
 */
proto.iproto.TransferPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.TransferPb;
  return proto.iproto.TransferPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.TransferPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.TransferPb}
 */
proto.iproto.TransferPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.TransferPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.TransferPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.TransferPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.TransferPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.TransferPb.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.TransferPb.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.TransferPb.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.TransferPb.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string recipient = 2;
 * @return {string}
 */
proto.iproto.TransferPb.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iproto.TransferPb.prototype.setRecipient = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {string}
 */
proto.iproto.TransferPb.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.iproto.TransferPb.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.iproto.TransferPb.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.TransferPb.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.VotePb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.VotePb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.VotePb.displayName = 'proto.iproto.VotePb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.VotePb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.VotePb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.VotePb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.VotePb.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    voteeaddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.VotePb}
 */
proto.iproto.VotePb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.VotePb;
  return proto.iproto.VotePb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.VotePb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.VotePb}
 */
proto.iproto.VotePb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoteeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.VotePb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.VotePb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.VotePb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.VotePb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getVoteeaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iproto.VotePb.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iproto.VotePb.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iproto.VotePb.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.VotePb.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string voteeAddress = 2;
 * @return {string}
 */
proto.iproto.VotePb.prototype.getVoteeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iproto.VotePb.prototype.setVoteeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.ExecutionPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.ExecutionPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.ExecutionPb.displayName = 'proto.iproto.ExecutionPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.ExecutionPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.ExecutionPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.ExecutionPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ExecutionPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.ExecutionPb}
 */
proto.iproto.ExecutionPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.ExecutionPb;
  return proto.iproto.ExecutionPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.ExecutionPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.ExecutionPb}
 */
proto.iproto.ExecutionPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.ExecutionPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.ExecutionPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.ExecutionPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ExecutionPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.ExecutionPb.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.ExecutionPb.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.ExecutionPb.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ExecutionPb.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.iproto.ExecutionPb.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iproto.ExecutionPb.prototype.setContract = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {string}
 */
proto.iproto.ExecutionPb.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.iproto.ExecutionPb.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.iproto.ExecutionPb.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ExecutionPb.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.StartSubChainPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.StartSubChainPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.StartSubChainPb.displayName = 'proto.iproto.StartSubChainPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.StartSubChainPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.StartSubChainPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.StartSubChainPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.StartSubChainPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    securitydeposit: msg.getSecuritydeposit_asB64(),
    operationdeposit: msg.getOperationdeposit_asB64(),
    startheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    parentheightoffset: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.StartSubChainPb}
 */
proto.iproto.StartSubChainPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.StartSubChainPb;
  return proto.iproto.StartSubChainPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.StartSubChainPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.StartSubChainPb}
 */
proto.iproto.StartSubChainPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecuritydeposit(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperationdeposit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartheight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentheightoffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.StartSubChainPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.StartSubChainPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.StartSubChainPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.StartSubChainPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSecuritydeposit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOperationdeposit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStartheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getParentheightoffset();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint32 chainID = 1;
 * @return {number}
 */
proto.iproto.StartSubChainPb.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.StartSubChainPb.prototype.setChainid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes securityDeposit = 2;
 * @return {string}
 */
proto.iproto.StartSubChainPb.prototype.getSecuritydeposit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes securityDeposit = 2;
 * This is a type-conversion wrapper around `getSecuritydeposit()`
 * @return {string}
 */
proto.iproto.StartSubChainPb.prototype.getSecuritydeposit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecuritydeposit()));
};


/**
 * optional bytes securityDeposit = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecuritydeposit()`
 * @return {!Uint8Array}
 */
proto.iproto.StartSubChainPb.prototype.getSecuritydeposit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecuritydeposit()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.StartSubChainPb.prototype.setSecuritydeposit = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes operationDeposit = 3;
 * @return {string}
 */
proto.iproto.StartSubChainPb.prototype.getOperationdeposit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes operationDeposit = 3;
 * This is a type-conversion wrapper around `getOperationdeposit()`
 * @return {string}
 */
proto.iproto.StartSubChainPb.prototype.getOperationdeposit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperationdeposit()));
};


/**
 * optional bytes operationDeposit = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperationdeposit()`
 * @return {!Uint8Array}
 */
proto.iproto.StartSubChainPb.prototype.getOperationdeposit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperationdeposit()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.StartSubChainPb.prototype.setOperationdeposit = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 startHeight = 4;
 * @return {number}
 */
proto.iproto.StartSubChainPb.prototype.getStartheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iproto.StartSubChainPb.prototype.setStartheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 parentHeightOffset = 5;
 * @return {number}
 */
proto.iproto.StartSubChainPb.prototype.getParentheightoffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.iproto.StartSubChainPb.prototype.setParentheightoffset = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.StopSubChainPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.StopSubChainPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.StopSubChainPb.displayName = 'proto.iproto.StopSubChainPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.StopSubChainPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.StopSubChainPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.StopSubChainPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.StopSubChainPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stopheight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.StopSubChainPb}
 */
proto.iproto.StopSubChainPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.StopSubChainPb;
  return proto.iproto.StopSubChainPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.StopSubChainPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.StopSubChainPb}
 */
proto.iproto.StopSubChainPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStopheight(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.StopSubChainPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.StopSubChainPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.StopSubChainPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.StopSubChainPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStopheight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 chainID = 1;
 * @return {number}
 */
proto.iproto.StopSubChainPb.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.StopSubChainPb.prototype.setChainid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 stopHeight = 2;
 * @return {number}
 */
proto.iproto.StopSubChainPb.prototype.getStopheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.StopSubChainPb.prototype.setStopheight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string subChainAddress = 3;
 * @return {string}
 */
proto.iproto.StopSubChainPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iproto.StopSubChainPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.MerkleRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.MerkleRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.MerkleRoot.displayName = 'proto.iproto.MerkleRoot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.MerkleRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.MerkleRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.MerkleRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.MerkleRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.MerkleRoot}
 */
proto.iproto.MerkleRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.MerkleRoot;
  return proto.iproto.MerkleRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.MerkleRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.MerkleRoot}
 */
proto.iproto.MerkleRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.MerkleRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.MerkleRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.MerkleRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.MerkleRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.iproto.MerkleRoot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.MerkleRoot.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {string}
 */
proto.iproto.MerkleRoot.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.iproto.MerkleRoot.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.iproto.MerkleRoot.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.MerkleRoot.prototype.setValue = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PutBlockPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iproto.PutBlockPb.repeatedFields_, null);
};
goog.inherits(proto.iproto.PutBlockPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PutBlockPb.displayName = 'proto.iproto.PutBlockPb';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iproto.PutBlockPb.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PutBlockPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PutBlockPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PutBlockPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PutBlockPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rootsList: jspb.Message.toObjectList(msg.getRootsList(),
    proto.iproto.MerkleRoot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PutBlockPb}
 */
proto.iproto.PutBlockPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PutBlockPb;
  return proto.iproto.PutBlockPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PutBlockPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PutBlockPb}
 */
proto.iproto.PutBlockPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.iproto.MerkleRoot;
      reader.readMessage(value,proto.iproto.MerkleRoot.deserializeBinaryFromReader);
      msg.addRoots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PutBlockPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PutBlockPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PutBlockPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PutBlockPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRootsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.iproto.MerkleRoot.serializeBinaryToWriter
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PutBlockPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PutBlockPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.iproto.PutBlockPb.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.PutBlockPb.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated MerkleRoot roots = 3;
 * @return {!Array<!proto.iproto.MerkleRoot>}
 */
proto.iproto.PutBlockPb.prototype.getRootsList = function() {
  return /** @type{!Array<!proto.iproto.MerkleRoot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iproto.MerkleRoot, 3));
};


/** @param {!Array<!proto.iproto.MerkleRoot>} value */
proto.iproto.PutBlockPb.prototype.setRootsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.iproto.MerkleRoot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iproto.MerkleRoot}
 */
proto.iproto.PutBlockPb.prototype.addRoots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.iproto.MerkleRoot, opt_index);
};


proto.iproto.PutBlockPb.prototype.clearRootsList = function() {
  this.setRootsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.CreateDepositPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.CreateDepositPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.CreateDepositPb.displayName = 'proto.iproto.CreateDepositPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.CreateDepositPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.CreateDepositPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.CreateDepositPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.CreateDepositPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amount: msg.getAmount_asB64(),
    recipient: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.CreateDepositPb}
 */
proto.iproto.CreateDepositPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.CreateDepositPb;
  return proto.iproto.CreateDepositPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.CreateDepositPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.CreateDepositPb}
 */
proto.iproto.CreateDepositPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.CreateDepositPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.CreateDepositPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.CreateDepositPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.CreateDepositPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 chainID = 1;
 * @return {number}
 */
proto.iproto.CreateDepositPb.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.CreateDepositPb.prototype.setChainid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes amount = 2;
 * @return {string}
 */
proto.iproto.CreateDepositPb.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amount = 2;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.CreateDepositPb.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.CreateDepositPb.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.CreateDepositPb.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string recipient = 3;
 * @return {string}
 */
proto.iproto.CreateDepositPb.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iproto.CreateDepositPb.prototype.setRecipient = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.SettleDepositPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.SettleDepositPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.SettleDepositPb.displayName = 'proto.iproto.SettleDepositPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.SettleDepositPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.SettleDepositPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.SettleDepositPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.SettleDepositPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    recipient: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.SettleDepositPb}
 */
proto.iproto.SettleDepositPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.SettleDepositPb;
  return proto.iproto.SettleDepositPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.SettleDepositPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.SettleDepositPb}
 */
proto.iproto.SettleDepositPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.SettleDepositPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.SettleDepositPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.SettleDepositPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.SettleDepositPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.SettleDepositPb.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.SettleDepositPb.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.SettleDepositPb.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.SettleDepositPb.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string recipient = 2;
 * @return {string}
 */
proto.iproto.SettleDepositPb.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iproto.SettleDepositPb.prototype.setRecipient = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.iproto.SettleDepositPb.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iproto.SettleDepositPb.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.CreatePlumChainPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.CreatePlumChainPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.CreatePlumChainPb.displayName = 'proto.iproto.CreatePlumChainPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.CreatePlumChainPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.CreatePlumChainPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.CreatePlumChainPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.CreatePlumChainPb.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.CreatePlumChainPb}
 */
proto.iproto.CreatePlumChainPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.CreatePlumChainPb;
  return proto.iproto.CreatePlumChainPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.CreatePlumChainPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.CreatePlumChainPb}
 */
proto.iproto.CreatePlumChainPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.CreatePlumChainPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.CreatePlumChainPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.CreatePlumChainPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.CreatePlumChainPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.TerminatePlumChainPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.TerminatePlumChainPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.TerminatePlumChainPb.displayName = 'proto.iproto.TerminatePlumChainPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.TerminatePlumChainPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.TerminatePlumChainPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.TerminatePlumChainPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.TerminatePlumChainPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.TerminatePlumChainPb}
 */
proto.iproto.TerminatePlumChainPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.TerminatePlumChainPb;
  return proto.iproto.TerminatePlumChainPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.TerminatePlumChainPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.TerminatePlumChainPb}
 */
proto.iproto.TerminatePlumChainPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.TerminatePlumChainPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.TerminatePlumChainPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.TerminatePlumChainPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.TerminatePlumChainPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.TerminatePlumChainPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.TerminatePlumChainPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumPutBlockPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumPutBlockPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumPutBlockPb.displayName = 'proto.iproto.PlumPutBlockPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumPutBlockPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumPutBlockPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumPutBlockPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumPutBlockPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rootsMap: (f = msg.getRootsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumPutBlockPb}
 */
proto.iproto.PlumPutBlockPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumPutBlockPb;
  return proto.iproto.PlumPutBlockPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumPutBlockPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumPutBlockPb}
 */
proto.iproto.PlumPutBlockPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = msg.getRootsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumPutBlockPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumPutBlockPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumPutBlockPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumPutBlockPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRootsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumPutBlockPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumPutBlockPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.iproto.PlumPutBlockPb.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.PlumPutBlockPb.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, bytes> roots = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.iproto.PlumPutBlockPb.prototype.getRootsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.iproto.PlumPutBlockPb.prototype.clearRootsMap = function() {
  this.getRootsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumCreateDepositPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumCreateDepositPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumCreateDepositPb.displayName = 'proto.iproto.PlumCreateDepositPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumCreateDepositPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumCreateDepositPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumCreateDepositPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumCreateDepositPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: msg.getAmount_asB64(),
    recipient: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumCreateDepositPb}
 */
proto.iproto.PlumCreateDepositPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumCreateDepositPb;
  return proto.iproto.PlumCreateDepositPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumCreateDepositPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumCreateDepositPb}
 */
proto.iproto.PlumCreateDepositPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumCreateDepositPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumCreateDepositPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumCreateDepositPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumCreateDepositPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumCreateDepositPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumCreateDepositPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes amount = 2;
 * @return {string}
 */
proto.iproto.PlumCreateDepositPb.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes amount = 2;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.PlumCreateDepositPb.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumCreateDepositPb.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumCreateDepositPb.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string recipient = 3;
 * @return {string}
 */
proto.iproto.PlumCreateDepositPb.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iproto.PlumCreateDepositPb.prototype.setRecipient = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumStartExitPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumStartExitPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumStartExitPb.displayName = 'proto.iproto.PlumStartExitPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumStartExitPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumStartExitPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumStartExitPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumStartExitPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    previoustransfer: msg.getPrevioustransfer_asB64(),
    previoustransferblockproof: msg.getPrevioustransferblockproof_asB64(),
    previoustransferblockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    exittransfer: msg.getExittransfer_asB64(),
    exittransferblockproof: msg.getExittransferblockproof_asB64(),
    exittransferblockheight: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumStartExitPb}
 */
proto.iproto.PlumStartExitPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumStartExitPb;
  return proto.iproto.PlumStartExitPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumStartExitPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumStartExitPb}
 */
proto.iproto.PlumStartExitPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevioustransfer(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevioustransferblockproof(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrevioustransferblockheight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExittransfer(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExittransferblockproof(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExittransferblockheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumStartExitPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumStartExitPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumStartExitPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumStartExitPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrevioustransfer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrevioustransferblockproof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPrevioustransferblockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getExittransfer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getExittransferblockproof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getExittransferblockheight();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumStartExitPb.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes previousTransfer = 2;
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransfer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes previousTransfer = 2;
 * This is a type-conversion wrapper around `getPrevioustransfer()`
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransfer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevioustransfer()));
};


/**
 * optional bytes previousTransfer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevioustransfer()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransfer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevioustransfer()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumStartExitPb.prototype.setPrevioustransfer = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes previousTransferBlockProof = 3;
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransferblockproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes previousTransferBlockProof = 3;
 * This is a type-conversion wrapper around `getPrevioustransferblockproof()`
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransferblockproof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevioustransferblockproof()));
};


/**
 * optional bytes previousTransferBlockProof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevioustransferblockproof()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransferblockproof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevioustransferblockproof()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumStartExitPb.prototype.setPrevioustransferblockproof = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 previousTransferBlockHeight = 4;
 * @return {number}
 */
proto.iproto.PlumStartExitPb.prototype.getPrevioustransferblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iproto.PlumStartExitPb.prototype.setPrevioustransferblockheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes exitTransfer = 5;
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransfer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes exitTransfer = 5;
 * This is a type-conversion wrapper around `getExittransfer()`
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransfer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExittransfer()));
};


/**
 * optional bytes exitTransfer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExittransfer()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransfer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExittransfer()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumStartExitPb.prototype.setExittransfer = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes exitTransferBlockProof = 6;
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransferblockproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes exitTransferBlockProof = 6;
 * This is a type-conversion wrapper around `getExittransferblockproof()`
 * @return {string}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransferblockproof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExittransferblockproof()));
};


/**
 * optional bytes exitTransferBlockProof = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExittransferblockproof()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransferblockproof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExittransferblockproof()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumStartExitPb.prototype.setExittransferblockproof = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint64 exitTransferBlockHeight = 7;
 * @return {number}
 */
proto.iproto.PlumStartExitPb.prototype.getExittransferblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.iproto.PlumStartExitPb.prototype.setExittransferblockheight = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumChallengeExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumChallengeExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumChallengeExit.displayName = 'proto.iproto.PlumChallengeExit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumChallengeExit.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumChallengeExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumChallengeExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumChallengeExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coinid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    challengetransfer: msg.getChallengetransfer_asB64(),
    challengetransferblockproof: msg.getChallengetransferblockproof_asB64(),
    challengetransferblockheight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumChallengeExit}
 */
proto.iproto.PlumChallengeExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumChallengeExit;
  return proto.iproto.PlumChallengeExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumChallengeExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumChallengeExit}
 */
proto.iproto.PlumChallengeExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoinid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallengetransfer(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallengetransferblockproof(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChallengetransferblockheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumChallengeExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumChallengeExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumChallengeExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumChallengeExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoinid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getChallengetransfer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChallengetransferblockproof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getChallengetransferblockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumChallengeExit.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumChallengeExit.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 coinID = 2;
 * @return {number}
 */
proto.iproto.PlumChallengeExit.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.PlumChallengeExit.prototype.setCoinid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes challengeTransfer = 3;
 * @return {string}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransfer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes challengeTransfer = 3;
 * This is a type-conversion wrapper around `getChallengetransfer()`
 * @return {string}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransfer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallengetransfer()));
};


/**
 * optional bytes challengeTransfer = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallengetransfer()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransfer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallengetransfer()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumChallengeExit.prototype.setChallengetransfer = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes challengeTransferBlockProof = 4;
 * @return {string}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransferblockproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes challengeTransferBlockProof = 4;
 * This is a type-conversion wrapper around `getChallengetransferblockproof()`
 * @return {string}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransferblockproof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallengetransferblockproof()));
};


/**
 * optional bytes challengeTransferBlockProof = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallengetransferblockproof()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransferblockproof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallengetransferblockproof()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumChallengeExit.prototype.setChallengetransferblockproof = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 challengeTransferBlockHeight = 5;
 * @return {number}
 */
proto.iproto.PlumChallengeExit.prototype.getChallengetransferblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.iproto.PlumChallengeExit.prototype.setChallengetransferblockheight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumResponseChallengeExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumResponseChallengeExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumResponseChallengeExit.displayName = 'proto.iproto.PlumResponseChallengeExit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumResponseChallengeExit.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumResponseChallengeExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumResponseChallengeExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumResponseChallengeExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coinid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    challengetransfer: msg.getChallengetransfer_asB64(),
    responsetransfer: msg.getResponsetransfer_asB64(),
    responsetransferblockproof: msg.getResponsetransferblockproof_asB64(),
    previoustransferblockheight: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumResponseChallengeExit}
 */
proto.iproto.PlumResponseChallengeExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumResponseChallengeExit;
  return proto.iproto.PlumResponseChallengeExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumResponseChallengeExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumResponseChallengeExit}
 */
proto.iproto.PlumResponseChallengeExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoinid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallengetransfer(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponsetransfer(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setResponsetransferblockproof(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrevioustransferblockheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumResponseChallengeExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumResponseChallengeExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumResponseChallengeExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumResponseChallengeExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoinid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getChallengetransfer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getResponsetransfer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getResponsetransferblockproof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPrevioustransferblockheight();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumResponseChallengeExit.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 coinID = 2;
 * @return {number}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.PlumResponseChallengeExit.prototype.setCoinid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes challengeTransfer = 3;
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getChallengetransfer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes challengeTransfer = 3;
 * This is a type-conversion wrapper around `getChallengetransfer()`
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getChallengetransfer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallengetransfer()));
};


/**
 * optional bytes challengeTransfer = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallengetransfer()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getChallengetransfer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallengetransfer()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumResponseChallengeExit.prototype.setChallengetransfer = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes responseTransfer = 4;
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransfer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes responseTransfer = 4;
 * This is a type-conversion wrapper around `getResponsetransfer()`
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransfer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponsetransfer()));
};


/**
 * optional bytes responseTransfer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponsetransfer()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransfer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponsetransfer()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumResponseChallengeExit.prototype.setResponsetransfer = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes responseTransferBlockProof = 5;
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransferblockproof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes responseTransferBlockProof = 5;
 * This is a type-conversion wrapper around `getResponsetransferblockproof()`
 * @return {string}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransferblockproof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getResponsetransferblockproof()));
};


/**
 * optional bytes responseTransferBlockProof = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResponsetransferblockproof()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getResponsetransferblockproof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getResponsetransferblockproof()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumResponseChallengeExit.prototype.setResponsetransferblockproof = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 previousTransferBlockHeight = 6;
 * @return {number}
 */
proto.iproto.PlumResponseChallengeExit.prototype.getPrevioustransferblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.iproto.PlumResponseChallengeExit.prototype.setPrevioustransferblockheight = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumFinalizeExit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumFinalizeExit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumFinalizeExit.displayName = 'proto.iproto.PlumFinalizeExit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumFinalizeExit.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumFinalizeExit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumFinalizeExit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumFinalizeExit.toObject = function(includeInstance, msg) {
  var f, obj = {
    subchainaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coinid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumFinalizeExit}
 */
proto.iproto.PlumFinalizeExit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumFinalizeExit;
  return proto.iproto.PlumFinalizeExit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumFinalizeExit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumFinalizeExit}
 */
proto.iproto.PlumFinalizeExit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubchainaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumFinalizeExit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumFinalizeExit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumFinalizeExit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumFinalizeExit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubchainaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoinid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string subChainAddress = 1;
 * @return {string}
 */
proto.iproto.PlumFinalizeExit.prototype.getSubchainaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.PlumFinalizeExit.prototype.setSubchainaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 coinID = 2;
 * @return {number}
 */
proto.iproto.PlumFinalizeExit.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.PlumFinalizeExit.prototype.setCoinid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumSettleDepositPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumSettleDepositPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumSettleDepositPb.displayName = 'proto.iproto.PlumSettleDepositPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumSettleDepositPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumSettleDepositPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumSettleDepositPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumSettleDepositPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumSettleDepositPb}
 */
proto.iproto.PlumSettleDepositPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumSettleDepositPb;
  return proto.iproto.PlumSettleDepositPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumSettleDepositPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumSettleDepositPb}
 */
proto.iproto.PlumSettleDepositPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumSettleDepositPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumSettleDepositPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumSettleDepositPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumSettleDepositPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoinid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 coinID = 1;
 * @return {number}
 */
proto.iproto.PlumSettleDepositPb.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.PlumSettleDepositPb.prototype.setCoinid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.PlumTransferPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.PlumTransferPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.PlumTransferPb.displayName = 'proto.iproto.PlumTransferPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.PlumTransferPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.PlumTransferPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.PlumTransferPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumTransferPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    denomination: msg.getDenomination_asB64(),
    owner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.PlumTransferPb}
 */
proto.iproto.PlumTransferPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.PlumTransferPb;
  return proto.iproto.PlumTransferPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.PlumTransferPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.PlumTransferPb}
 */
proto.iproto.PlumTransferPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCoinid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDenomination(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.PlumTransferPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.PlumTransferPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.PlumTransferPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.PlumTransferPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoinid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDenomination_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 coinID = 1;
 * @return {number}
 */
proto.iproto.PlumTransferPb.prototype.getCoinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.PlumTransferPb.prototype.setCoinid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes denomination = 2;
 * @return {string}
 */
proto.iproto.PlumTransferPb.prototype.getDenomination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes denomination = 2;
 * This is a type-conversion wrapper around `getDenomination()`
 * @return {string}
 */
proto.iproto.PlumTransferPb.prototype.getDenomination_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDenomination()));
};


/**
 * optional bytes denomination = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDenomination()`
 * @return {!Uint8Array}
 */
proto.iproto.PlumTransferPb.prototype.getDenomination_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDenomination()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.PlumTransferPb.prototype.setDenomination = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string owner = 3;
 * @return {string}
 */
proto.iproto.PlumTransferPb.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.iproto.PlumTransferPb.prototype.setOwner = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recipient = 4;
 * @return {string}
 */
proto.iproto.PlumTransferPb.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.iproto.PlumTransferPb.prototype.setRecipient = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.ActionPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.iproto.ActionPb.oneofGroups_);
};
goog.inherits(proto.iproto.ActionPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.ActionPb.displayName = 'proto.iproto.ActionPb';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.iproto.ActionPb.oneofGroups_ = [[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,31,32,33]];

/**
 * @enum {number}
 */
proto.iproto.ActionPb.ActionCase = {
  ACTION_NOT_SET: 0,
  TRANSFER: 10,
  VOTE: 11,
  EXECUTION: 12,
  STARTSUBCHAIN: 13,
  STOPSUBCHAIN: 14,
  PUTBLOCK: 15,
  CREATEDEPOSIT: 16,
  SETTLEDEPOSIT: 17,
  CREATEPLUMCHAIN: 18,
  TERMINATEPLUMCHAIN: 19,
  PLUMPUTBLOCK: 20,
  PLUMCREATEDEPOSIT: 21,
  PLUMSTARTEXIT: 22,
  PLUMCHALLENGEEXIT: 23,
  PLUMRESPONSECHALLENGEEXIT: 24,
  PLUMFINALIZEEXIT: 25,
  PLUMSETTLEDEPOSIT: 26,
  PLUMTRANSFER: 27,
  DEPOSITTOREWARDINGFUND: 30,
  CLAIMFROMREWARDINGFUND: 31,
  SETREWARD: 32,
  GRANTREWARD: 33
};

/**
 * @return {proto.iproto.ActionPb.ActionCase}
 */
proto.iproto.ActionPb.prototype.getActionCase = function() {
  return /** @type {proto.iproto.ActionPb.ActionCase} */(jspb.Message.computeOneofCase(this, proto.iproto.ActionPb.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.ActionPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.ActionPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.ActionPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ActionPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    senderpubkey: msg.getSenderpubkey_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gaslimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    gasprice: msg.getGasprice_asB64(),
    signature: msg.getSignature_asB64(),
    transfer: (f = msg.getTransfer()) && proto.iproto.TransferPb.toObject(includeInstance, f),
    vote: (f = msg.getVote()) && proto.iproto.VotePb.toObject(includeInstance, f),
    execution: (f = msg.getExecution()) && proto.iproto.ExecutionPb.toObject(includeInstance, f),
    startsubchain: (f = msg.getStartsubchain()) && proto.iproto.StartSubChainPb.toObject(includeInstance, f),
    stopsubchain: (f = msg.getStopsubchain()) && proto.iproto.StopSubChainPb.toObject(includeInstance, f),
    putblock: (f = msg.getPutblock()) && proto.iproto.PutBlockPb.toObject(includeInstance, f),
    createdeposit: (f = msg.getCreatedeposit()) && proto.iproto.CreateDepositPb.toObject(includeInstance, f),
    settledeposit: (f = msg.getSettledeposit()) && proto.iproto.SettleDepositPb.toObject(includeInstance, f),
    createplumchain: (f = msg.getCreateplumchain()) && proto.iproto.CreatePlumChainPb.toObject(includeInstance, f),
    terminateplumchain: (f = msg.getTerminateplumchain()) && proto.iproto.TerminatePlumChainPb.toObject(includeInstance, f),
    plumputblock: (f = msg.getPlumputblock()) && proto.iproto.PlumPutBlockPb.toObject(includeInstance, f),
    plumcreatedeposit: (f = msg.getPlumcreatedeposit()) && proto.iproto.PlumCreateDepositPb.toObject(includeInstance, f),
    plumstartexit: (f = msg.getPlumstartexit()) && proto.iproto.PlumStartExitPb.toObject(includeInstance, f),
    plumchallengeexit: (f = msg.getPlumchallengeexit()) && proto.iproto.PlumChallengeExit.toObject(includeInstance, f),
    plumresponsechallengeexit: (f = msg.getPlumresponsechallengeexit()) && proto.iproto.PlumResponseChallengeExit.toObject(includeInstance, f),
    plumfinalizeexit: (f = msg.getPlumfinalizeexit()) && proto.iproto.PlumFinalizeExit.toObject(includeInstance, f),
    plumsettledeposit: (f = msg.getPlumsettledeposit()) && proto.iproto.PlumSettleDepositPb.toObject(includeInstance, f),
    plumtransfer: (f = msg.getPlumtransfer()) && proto.iproto.PlumTransferPb.toObject(includeInstance, f),
    deposittorewardingfund: (f = msg.getDeposittorewardingfund()) && proto.iproto.DepositToRewardingFund.toObject(includeInstance, f),
    claimfromrewardingfund: (f = msg.getClaimfromrewardingfund()) && proto.iproto.ClaimFromRewardingFund.toObject(includeInstance, f),
    setreward: (f = msg.getSetreward()) && proto.iproto.SetReward.toObject(includeInstance, f),
    grantreward: (f = msg.getGrantreward()) && proto.iproto.GrantReward.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.ActionPb}
 */
proto.iproto.ActionPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.ActionPb;
  return proto.iproto.ActionPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.ActionPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.ActionPb}
 */
proto.iproto.ActionPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderpubkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGaslimit(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasprice(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 10:
      var value = new proto.iproto.TransferPb;
      reader.readMessage(value,proto.iproto.TransferPb.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 11:
      var value = new proto.iproto.VotePb;
      reader.readMessage(value,proto.iproto.VotePb.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    case 12:
      var value = new proto.iproto.ExecutionPb;
      reader.readMessage(value,proto.iproto.ExecutionPb.deserializeBinaryFromReader);
      msg.setExecution(value);
      break;
    case 13:
      var value = new proto.iproto.StartSubChainPb;
      reader.readMessage(value,proto.iproto.StartSubChainPb.deserializeBinaryFromReader);
      msg.setStartsubchain(value);
      break;
    case 14:
      var value = new proto.iproto.StopSubChainPb;
      reader.readMessage(value,proto.iproto.StopSubChainPb.deserializeBinaryFromReader);
      msg.setStopsubchain(value);
      break;
    case 15:
      var value = new proto.iproto.PutBlockPb;
      reader.readMessage(value,proto.iproto.PutBlockPb.deserializeBinaryFromReader);
      msg.setPutblock(value);
      break;
    case 16:
      var value = new proto.iproto.CreateDepositPb;
      reader.readMessage(value,proto.iproto.CreateDepositPb.deserializeBinaryFromReader);
      msg.setCreatedeposit(value);
      break;
    case 17:
      var value = new proto.iproto.SettleDepositPb;
      reader.readMessage(value,proto.iproto.SettleDepositPb.deserializeBinaryFromReader);
      msg.setSettledeposit(value);
      break;
    case 18:
      var value = new proto.iproto.CreatePlumChainPb;
      reader.readMessage(value,proto.iproto.CreatePlumChainPb.deserializeBinaryFromReader);
      msg.setCreateplumchain(value);
      break;
    case 19:
      var value = new proto.iproto.TerminatePlumChainPb;
      reader.readMessage(value,proto.iproto.TerminatePlumChainPb.deserializeBinaryFromReader);
      msg.setTerminateplumchain(value);
      break;
    case 20:
      var value = new proto.iproto.PlumPutBlockPb;
      reader.readMessage(value,proto.iproto.PlumPutBlockPb.deserializeBinaryFromReader);
      msg.setPlumputblock(value);
      break;
    case 21:
      var value = new proto.iproto.PlumCreateDepositPb;
      reader.readMessage(value,proto.iproto.PlumCreateDepositPb.deserializeBinaryFromReader);
      msg.setPlumcreatedeposit(value);
      break;
    case 22:
      var value = new proto.iproto.PlumStartExitPb;
      reader.readMessage(value,proto.iproto.PlumStartExitPb.deserializeBinaryFromReader);
      msg.setPlumstartexit(value);
      break;
    case 23:
      var value = new proto.iproto.PlumChallengeExit;
      reader.readMessage(value,proto.iproto.PlumChallengeExit.deserializeBinaryFromReader);
      msg.setPlumchallengeexit(value);
      break;
    case 24:
      var value = new proto.iproto.PlumResponseChallengeExit;
      reader.readMessage(value,proto.iproto.PlumResponseChallengeExit.deserializeBinaryFromReader);
      msg.setPlumresponsechallengeexit(value);
      break;
    case 25:
      var value = new proto.iproto.PlumFinalizeExit;
      reader.readMessage(value,proto.iproto.PlumFinalizeExit.deserializeBinaryFromReader);
      msg.setPlumfinalizeexit(value);
      break;
    case 26:
      var value = new proto.iproto.PlumSettleDepositPb;
      reader.readMessage(value,proto.iproto.PlumSettleDepositPb.deserializeBinaryFromReader);
      msg.setPlumsettledeposit(value);
      break;
    case 27:
      var value = new proto.iproto.PlumTransferPb;
      reader.readMessage(value,proto.iproto.PlumTransferPb.deserializeBinaryFromReader);
      msg.setPlumtransfer(value);
      break;
    case 30:
      var value = new proto.iproto.DepositToRewardingFund;
      reader.readMessage(value,proto.iproto.DepositToRewardingFund.deserializeBinaryFromReader);
      msg.setDeposittorewardingfund(value);
      break;
    case 31:
      var value = new proto.iproto.ClaimFromRewardingFund;
      reader.readMessage(value,proto.iproto.ClaimFromRewardingFund.deserializeBinaryFromReader);
      msg.setClaimfromrewardingfund(value);
      break;
    case 32:
      var value = new proto.iproto.SetReward;
      reader.readMessage(value,proto.iproto.SetReward.deserializeBinaryFromReader);
      msg.setSetreward(value);
      break;
    case 33:
      var value = new proto.iproto.GrantReward;
      reader.readMessage(value,proto.iproto.GrantReward.deserializeBinaryFromReader);
      msg.setGrantreward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.ActionPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.ActionPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.ActionPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ActionPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSenderpubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGaslimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getGasprice_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.iproto.TransferPb.serializeBinaryToWriter
    );
  }
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.iproto.VotePb.serializeBinaryToWriter
    );
  }
  f = message.getExecution();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.iproto.ExecutionPb.serializeBinaryToWriter
    );
  }
  f = message.getStartsubchain();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.iproto.StartSubChainPb.serializeBinaryToWriter
    );
  }
  f = message.getStopsubchain();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.iproto.StopSubChainPb.serializeBinaryToWriter
    );
  }
  f = message.getPutblock();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.iproto.PutBlockPb.serializeBinaryToWriter
    );
  }
  f = message.getCreatedeposit();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.iproto.CreateDepositPb.serializeBinaryToWriter
    );
  }
  f = message.getSettledeposit();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.iproto.SettleDepositPb.serializeBinaryToWriter
    );
  }
  f = message.getCreateplumchain();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.iproto.CreatePlumChainPb.serializeBinaryToWriter
    );
  }
  f = message.getTerminateplumchain();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.iproto.TerminatePlumChainPb.serializeBinaryToWriter
    );
  }
  f = message.getPlumputblock();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.iproto.PlumPutBlockPb.serializeBinaryToWriter
    );
  }
  f = message.getPlumcreatedeposit();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.iproto.PlumCreateDepositPb.serializeBinaryToWriter
    );
  }
  f = message.getPlumstartexit();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.iproto.PlumStartExitPb.serializeBinaryToWriter
    );
  }
  f = message.getPlumchallengeexit();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.iproto.PlumChallengeExit.serializeBinaryToWriter
    );
  }
  f = message.getPlumresponsechallengeexit();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.iproto.PlumResponseChallengeExit.serializeBinaryToWriter
    );
  }
  f = message.getPlumfinalizeexit();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.iproto.PlumFinalizeExit.serializeBinaryToWriter
    );
  }
  f = message.getPlumsettledeposit();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.iproto.PlumSettleDepositPb.serializeBinaryToWriter
    );
  }
  f = message.getPlumtransfer();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.iproto.PlumTransferPb.serializeBinaryToWriter
    );
  }
  f = message.getDeposittorewardingfund();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.iproto.DepositToRewardingFund.serializeBinaryToWriter
    );
  }
  f = message.getClaimfromrewardingfund();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.iproto.ClaimFromRewardingFund.serializeBinaryToWriter
    );
  }
  f = message.getSetreward();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.iproto.SetReward.serializeBinaryToWriter
    );
  }
  f = message.getGrantreward();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.iproto.GrantReward.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.iproto.ActionPb.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.ActionPb.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes senderPubKey = 3;
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getSenderpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes senderPubKey = 3;
 * This is a type-conversion wrapper around `getSenderpubkey()`
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getSenderpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderpubkey()));
};


/**
 * optional bytes senderPubKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderpubkey()`
 * @return {!Uint8Array}
 */
proto.iproto.ActionPb.prototype.getSenderpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ActionPb.prototype.setSenderpubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 nonce = 4;
 * @return {number}
 */
proto.iproto.ActionPb.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iproto.ActionPb.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 gasLimit = 5;
 * @return {number}
 */
proto.iproto.ActionPb.prototype.getGaslimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.iproto.ActionPb.prototype.setGaslimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes gasPrice = 6;
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getGasprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes gasPrice = 6;
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getGasprice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasprice()));
};


/**
 * optional bytes gasPrice = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasprice()`
 * @return {!Uint8Array}
 */
proto.iproto.ActionPb.prototype.getGasprice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasprice()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ActionPb.prototype.setGasprice = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes signature = 7;
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.iproto.ActionPb.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.iproto.ActionPb.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ActionPb.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional TransferPb transfer = 10;
 * @return {?proto.iproto.TransferPb}
 */
proto.iproto.ActionPb.prototype.getTransfer = function() {
  return /** @type{?proto.iproto.TransferPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.TransferPb, 10));
};


/** @param {?proto.iproto.TransferPb|undefined} value */
proto.iproto.ActionPb.prototype.setTransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearTransfer = function() {
  this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional VotePb vote = 11;
 * @return {?proto.iproto.VotePb}
 */
proto.iproto.ActionPb.prototype.getVote = function() {
  return /** @type{?proto.iproto.VotePb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.VotePb, 11));
};


/** @param {?proto.iproto.VotePb|undefined} value */
proto.iproto.ActionPb.prototype.setVote = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearVote = function() {
  this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasVote = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ExecutionPb execution = 12;
 * @return {?proto.iproto.ExecutionPb}
 */
proto.iproto.ActionPb.prototype.getExecution = function() {
  return /** @type{?proto.iproto.ExecutionPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.ExecutionPb, 12));
};


/** @param {?proto.iproto.ExecutionPb|undefined} value */
proto.iproto.ActionPb.prototype.setExecution = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearExecution = function() {
  this.setExecution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasExecution = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional StartSubChainPb startSubChain = 13;
 * @return {?proto.iproto.StartSubChainPb}
 */
proto.iproto.ActionPb.prototype.getStartsubchain = function() {
  return /** @type{?proto.iproto.StartSubChainPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.StartSubChainPb, 13));
};


/** @param {?proto.iproto.StartSubChainPb|undefined} value */
proto.iproto.ActionPb.prototype.setStartsubchain = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearStartsubchain = function() {
  this.setStartsubchain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasStartsubchain = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional StopSubChainPb stopSubChain = 14;
 * @return {?proto.iproto.StopSubChainPb}
 */
proto.iproto.ActionPb.prototype.getStopsubchain = function() {
  return /** @type{?proto.iproto.StopSubChainPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.StopSubChainPb, 14));
};


/** @param {?proto.iproto.StopSubChainPb|undefined} value */
proto.iproto.ActionPb.prototype.setStopsubchain = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearStopsubchain = function() {
  this.setStopsubchain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasStopsubchain = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional PutBlockPb putBlock = 15;
 * @return {?proto.iproto.PutBlockPb}
 */
proto.iproto.ActionPb.prototype.getPutblock = function() {
  return /** @type{?proto.iproto.PutBlockPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PutBlockPb, 15));
};


/** @param {?proto.iproto.PutBlockPb|undefined} value */
proto.iproto.ActionPb.prototype.setPutblock = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPutblock = function() {
  this.setPutblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPutblock = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional CreateDepositPb createDeposit = 16;
 * @return {?proto.iproto.CreateDepositPb}
 */
proto.iproto.ActionPb.prototype.getCreatedeposit = function() {
  return /** @type{?proto.iproto.CreateDepositPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.CreateDepositPb, 16));
};


/** @param {?proto.iproto.CreateDepositPb|undefined} value */
proto.iproto.ActionPb.prototype.setCreatedeposit = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearCreatedeposit = function() {
  this.setCreatedeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasCreatedeposit = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional SettleDepositPb settleDeposit = 17;
 * @return {?proto.iproto.SettleDepositPb}
 */
proto.iproto.ActionPb.prototype.getSettledeposit = function() {
  return /** @type{?proto.iproto.SettleDepositPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.SettleDepositPb, 17));
};


/** @param {?proto.iproto.SettleDepositPb|undefined} value */
proto.iproto.ActionPb.prototype.setSettledeposit = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearSettledeposit = function() {
  this.setSettledeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasSettledeposit = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CreatePlumChainPb createPlumChain = 18;
 * @return {?proto.iproto.CreatePlumChainPb}
 */
proto.iproto.ActionPb.prototype.getCreateplumchain = function() {
  return /** @type{?proto.iproto.CreatePlumChainPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.CreatePlumChainPb, 18));
};


/** @param {?proto.iproto.CreatePlumChainPb|undefined} value */
proto.iproto.ActionPb.prototype.setCreateplumchain = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearCreateplumchain = function() {
  this.setCreateplumchain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasCreateplumchain = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional TerminatePlumChainPb terminatePlumChain = 19;
 * @return {?proto.iproto.TerminatePlumChainPb}
 */
proto.iproto.ActionPb.prototype.getTerminateplumchain = function() {
  return /** @type{?proto.iproto.TerminatePlumChainPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.TerminatePlumChainPb, 19));
};


/** @param {?proto.iproto.TerminatePlumChainPb|undefined} value */
proto.iproto.ActionPb.prototype.setTerminateplumchain = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearTerminateplumchain = function() {
  this.setTerminateplumchain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasTerminateplumchain = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional PlumPutBlockPb plumPutBlock = 20;
 * @return {?proto.iproto.PlumPutBlockPb}
 */
proto.iproto.ActionPb.prototype.getPlumputblock = function() {
  return /** @type{?proto.iproto.PlumPutBlockPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumPutBlockPb, 20));
};


/** @param {?proto.iproto.PlumPutBlockPb|undefined} value */
proto.iproto.ActionPb.prototype.setPlumputblock = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumputblock = function() {
  this.setPlumputblock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumputblock = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional PlumCreateDepositPb plumCreateDeposit = 21;
 * @return {?proto.iproto.PlumCreateDepositPb}
 */
proto.iproto.ActionPb.prototype.getPlumcreatedeposit = function() {
  return /** @type{?proto.iproto.PlumCreateDepositPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumCreateDepositPb, 21));
};


/** @param {?proto.iproto.PlumCreateDepositPb|undefined} value */
proto.iproto.ActionPb.prototype.setPlumcreatedeposit = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumcreatedeposit = function() {
  this.setPlumcreatedeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumcreatedeposit = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional PlumStartExitPb plumStartExit = 22;
 * @return {?proto.iproto.PlumStartExitPb}
 */
proto.iproto.ActionPb.prototype.getPlumstartexit = function() {
  return /** @type{?proto.iproto.PlumStartExitPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumStartExitPb, 22));
};


/** @param {?proto.iproto.PlumStartExitPb|undefined} value */
proto.iproto.ActionPb.prototype.setPlumstartexit = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumstartexit = function() {
  this.setPlumstartexit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumstartexit = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional PlumChallengeExit plumChallengeExit = 23;
 * @return {?proto.iproto.PlumChallengeExit}
 */
proto.iproto.ActionPb.prototype.getPlumchallengeexit = function() {
  return /** @type{?proto.iproto.PlumChallengeExit} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumChallengeExit, 23));
};


/** @param {?proto.iproto.PlumChallengeExit|undefined} value */
proto.iproto.ActionPb.prototype.setPlumchallengeexit = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumchallengeexit = function() {
  this.setPlumchallengeexit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumchallengeexit = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional PlumResponseChallengeExit plumResponseChallengeExit = 24;
 * @return {?proto.iproto.PlumResponseChallengeExit}
 */
proto.iproto.ActionPb.prototype.getPlumresponsechallengeexit = function() {
  return /** @type{?proto.iproto.PlumResponseChallengeExit} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumResponseChallengeExit, 24));
};


/** @param {?proto.iproto.PlumResponseChallengeExit|undefined} value */
proto.iproto.ActionPb.prototype.setPlumresponsechallengeexit = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumresponsechallengeexit = function() {
  this.setPlumresponsechallengeexit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumresponsechallengeexit = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PlumFinalizeExit plumFinalizeExit = 25;
 * @return {?proto.iproto.PlumFinalizeExit}
 */
proto.iproto.ActionPb.prototype.getPlumfinalizeexit = function() {
  return /** @type{?proto.iproto.PlumFinalizeExit} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumFinalizeExit, 25));
};


/** @param {?proto.iproto.PlumFinalizeExit|undefined} value */
proto.iproto.ActionPb.prototype.setPlumfinalizeexit = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumfinalizeexit = function() {
  this.setPlumfinalizeexit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumfinalizeexit = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional PlumSettleDepositPb plumSettleDeposit = 26;
 * @return {?proto.iproto.PlumSettleDepositPb}
 */
proto.iproto.ActionPb.prototype.getPlumsettledeposit = function() {
  return /** @type{?proto.iproto.PlumSettleDepositPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumSettleDepositPb, 26));
};


/** @param {?proto.iproto.PlumSettleDepositPb|undefined} value */
proto.iproto.ActionPb.prototype.setPlumsettledeposit = function(value) {
  jspb.Message.setOneofWrapperField(this, 26, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumsettledeposit = function() {
  this.setPlumsettledeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumsettledeposit = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional PlumTransferPb plumTransfer = 27;
 * @return {?proto.iproto.PlumTransferPb}
 */
proto.iproto.ActionPb.prototype.getPlumtransfer = function() {
  return /** @type{?proto.iproto.PlumTransferPb} */ (
    jspb.Message.getWrapperField(this, proto.iproto.PlumTransferPb, 27));
};


/** @param {?proto.iproto.PlumTransferPb|undefined} value */
proto.iproto.ActionPb.prototype.setPlumtransfer = function(value) {
  jspb.Message.setOneofWrapperField(this, 27, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearPlumtransfer = function() {
  this.setPlumtransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasPlumtransfer = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional DepositToRewardingFund depositToRewardingFund = 30;
 * @return {?proto.iproto.DepositToRewardingFund}
 */
proto.iproto.ActionPb.prototype.getDeposittorewardingfund = function() {
  return /** @type{?proto.iproto.DepositToRewardingFund} */ (
    jspb.Message.getWrapperField(this, proto.iproto.DepositToRewardingFund, 30));
};


/** @param {?proto.iproto.DepositToRewardingFund|undefined} value */
proto.iproto.ActionPb.prototype.setDeposittorewardingfund = function(value) {
  jspb.Message.setOneofWrapperField(this, 30, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearDeposittorewardingfund = function() {
  this.setDeposittorewardingfund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasDeposittorewardingfund = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional ClaimFromRewardingFund claimFromRewardingFund = 31;
 * @return {?proto.iproto.ClaimFromRewardingFund}
 */
proto.iproto.ActionPb.prototype.getClaimfromrewardingfund = function() {
  return /** @type{?proto.iproto.ClaimFromRewardingFund} */ (
    jspb.Message.getWrapperField(this, proto.iproto.ClaimFromRewardingFund, 31));
};


/** @param {?proto.iproto.ClaimFromRewardingFund|undefined} value */
proto.iproto.ActionPb.prototype.setClaimfromrewardingfund = function(value) {
  jspb.Message.setOneofWrapperField(this, 31, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearClaimfromrewardingfund = function() {
  this.setClaimfromrewardingfund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasClaimfromrewardingfund = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional SetReward setReward = 32;
 * @return {?proto.iproto.SetReward}
 */
proto.iproto.ActionPb.prototype.getSetreward = function() {
  return /** @type{?proto.iproto.SetReward} */ (
    jspb.Message.getWrapperField(this, proto.iproto.SetReward, 32));
};


/** @param {?proto.iproto.SetReward|undefined} value */
proto.iproto.ActionPb.prototype.setSetreward = function(value) {
  jspb.Message.setOneofWrapperField(this, 32, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearSetreward = function() {
  this.setSetreward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasSetreward = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional GrantReward grantReward = 33;
 * @return {?proto.iproto.GrantReward}
 */
proto.iproto.ActionPb.prototype.getGrantreward = function() {
  return /** @type{?proto.iproto.GrantReward} */ (
    jspb.Message.getWrapperField(this, proto.iproto.GrantReward, 33));
};


/** @param {?proto.iproto.GrantReward|undefined} value */
proto.iproto.ActionPb.prototype.setGrantreward = function(value) {
  jspb.Message.setOneofWrapperField(this, 33, proto.iproto.ActionPb.oneofGroups_[0], value);
};


proto.iproto.ActionPb.prototype.clearGrantreward = function() {
  this.setGrantreward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.ActionPb.prototype.hasGrantreward = function() {
  return jspb.Message.getField(this, 33) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.ReceiptPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iproto.ReceiptPb.repeatedFields_, null);
};
goog.inherits(proto.iproto.ReceiptPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.ReceiptPb.displayName = 'proto.iproto.ReceiptPb';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iproto.ReceiptPb.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.ReceiptPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.ReceiptPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.ReceiptPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ReceiptPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    returnvalue: msg.getReturnvalue_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    acthash: msg.getActhash_asB64(),
    gasconsumed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.iproto.LogPb.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.ReceiptPb}
 */
proto.iproto.ReceiptPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.ReceiptPb;
  return proto.iproto.ReceiptPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.ReceiptPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.ReceiptPb}
 */
proto.iproto.ReceiptPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReturnvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActhash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasconsumed(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 6:
      var value = new proto.iproto.LogPb;
      reader.readMessage(value,proto.iproto.LogPb.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.ReceiptPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.ReceiptPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.ReceiptPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ReceiptPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReturnvalue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getActhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getGasconsumed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.iproto.LogPb.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes returnValue = 1;
 * @return {string}
 */
proto.iproto.ReceiptPb.prototype.getReturnvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes returnValue = 1;
 * This is a type-conversion wrapper around `getReturnvalue()`
 * @return {string}
 */
proto.iproto.ReceiptPb.prototype.getReturnvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReturnvalue()));
};


/**
 * optional bytes returnValue = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReturnvalue()`
 * @return {!Uint8Array}
 */
proto.iproto.ReceiptPb.prototype.getReturnvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReturnvalue()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ReceiptPb.prototype.setReturnvalue = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 status = 2;
 * @return {number}
 */
proto.iproto.ReceiptPb.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.ReceiptPb.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes actHash = 3;
 * @return {string}
 */
proto.iproto.ReceiptPb.prototype.getActhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes actHash = 3;
 * This is a type-conversion wrapper around `getActhash()`
 * @return {string}
 */
proto.iproto.ReceiptPb.prototype.getActhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActhash()));
};


/**
 * optional bytes actHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActhash()`
 * @return {!Uint8Array}
 */
proto.iproto.ReceiptPb.prototype.getActhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ReceiptPb.prototype.setActhash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 gasConsumed = 4;
 * @return {number}
 */
proto.iproto.ReceiptPb.prototype.getGasconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iproto.ReceiptPb.prototype.setGasconsumed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string contractAddress = 5;
 * @return {string}
 */
proto.iproto.ReceiptPb.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.iproto.ReceiptPb.prototype.setContractaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated LogPb logs = 6;
 * @return {!Array<!proto.iproto.LogPb>}
 */
proto.iproto.ReceiptPb.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.iproto.LogPb>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iproto.LogPb, 6));
};


/** @param {!Array<!proto.iproto.LogPb>} value */
proto.iproto.ReceiptPb.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.iproto.LogPb=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iproto.LogPb}
 */
proto.iproto.ReceiptPb.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.iproto.LogPb, opt_index);
};


proto.iproto.ReceiptPb.prototype.clearLogsList = function() {
  this.setLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.LogPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iproto.LogPb.repeatedFields_, null);
};
goog.inherits(proto.iproto.LogPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.LogPb.displayName = 'proto.iproto.LogPb';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iproto.LogPb.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.LogPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.LogPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.LogPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.LogPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topicsList: msg.getTopicsList_asB64(),
    data: msg.getData_asB64(),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    txnhash: msg.getTxnhash_asB64(),
    blockhash: msg.getBlockhash_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.LogPb}
 */
proto.iproto.LogPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.LogPb;
  return proto.iproto.LogPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.LogPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.LogPb}
 */
proto.iproto.LogPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTopics(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlocknumber(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxnhash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.LogPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.LogPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.LogPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.LogPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopicsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTxnhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.iproto.LogPb.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iproto.LogPb.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes topics = 2;
 * @return {!Array<string>}
 */
proto.iproto.LogPb.prototype.getTopicsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes topics = 2;
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<string>}
 */
proto.iproto.LogPb.prototype.getTopicsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTopicsList()));
};


/**
 * repeated bytes topics = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopicsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.iproto.LogPb.prototype.getTopicsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTopicsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.iproto.LogPb.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.iproto.LogPb.prototype.addTopics = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.iproto.LogPb.prototype.clearTopicsList = function() {
  this.setTopicsList([]);
};


/**
 * optional bytes data = 3;
 * @return {string}
 */
proto.iproto.LogPb.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.iproto.LogPb.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.iproto.LogPb.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.LogPb.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 blockNumber = 4;
 * @return {number}
 */
proto.iproto.LogPb.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iproto.LogPb.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes txnHash = 5;
 * @return {string}
 */
proto.iproto.LogPb.prototype.getTxnhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes txnHash = 5;
 * This is a type-conversion wrapper around `getTxnhash()`
 * @return {string}
 */
proto.iproto.LogPb.prototype.getTxnhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxnhash()));
};


/**
 * optional bytes txnHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxnhash()`
 * @return {!Uint8Array}
 */
proto.iproto.LogPb.prototype.getTxnhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxnhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.LogPb.prototype.setTxnhash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes blockHash = 6;
 * @return {string}
 */
proto.iproto.LogPb.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes blockHash = 6;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.iproto.LogPb.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.iproto.LogPb.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.LogPb.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 index = 7;
 * @return {number}
 */
proto.iproto.LogPb.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.iproto.LogPb.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.DepositToRewardingFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.DepositToRewardingFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.DepositToRewardingFund.displayName = 'proto.iproto.DepositToRewardingFund';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.DepositToRewardingFund.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.DepositToRewardingFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.DepositToRewardingFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.DepositToRewardingFund.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.DepositToRewardingFund}
 */
proto.iproto.DepositToRewardingFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.DepositToRewardingFund;
  return proto.iproto.DepositToRewardingFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.DepositToRewardingFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.DepositToRewardingFund}
 */
proto.iproto.DepositToRewardingFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.DepositToRewardingFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.DepositToRewardingFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.DepositToRewardingFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.DepositToRewardingFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.DepositToRewardingFund.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.DepositToRewardingFund.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.DepositToRewardingFund.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.DepositToRewardingFund.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.iproto.DepositToRewardingFund.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.iproto.DepositToRewardingFund.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.iproto.DepositToRewardingFund.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.DepositToRewardingFund.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.ClaimFromRewardingFund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.ClaimFromRewardingFund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.ClaimFromRewardingFund.displayName = 'proto.iproto.ClaimFromRewardingFund';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.ClaimFromRewardingFund.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.ClaimFromRewardingFund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.ClaimFromRewardingFund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ClaimFromRewardingFund.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.ClaimFromRewardingFund}
 */
proto.iproto.ClaimFromRewardingFund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.ClaimFromRewardingFund;
  return proto.iproto.ClaimFromRewardingFund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.ClaimFromRewardingFund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.ClaimFromRewardingFund}
 */
proto.iproto.ClaimFromRewardingFund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.ClaimFromRewardingFund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.ClaimFromRewardingFund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.ClaimFromRewardingFund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.ClaimFromRewardingFund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ClaimFromRewardingFund.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.iproto.ClaimFromRewardingFund.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.ClaimFromRewardingFund.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.SetReward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.SetReward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.SetReward.displayName = 'proto.iproto.SetReward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.SetReward.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.SetReward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.SetReward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.SetReward.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: msg.getAmount_asB64(),
    data: msg.getData_asB64(),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.SetReward}
 */
proto.iproto.SetReward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.SetReward;
  return proto.iproto.SetReward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.SetReward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.SetReward}
 */
proto.iproto.SetReward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!proto.iproto.RewardType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.SetReward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.SetReward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.SetReward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.SetReward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bytes amount = 1;
 * @return {string}
 */
proto.iproto.SetReward.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes amount = 1;
 * This is a type-conversion wrapper around `getAmount()`
 * @return {string}
 */
proto.iproto.SetReward.prototype.getAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAmount()));
};


/**
 * optional bytes amount = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAmount()`
 * @return {!Uint8Array}
 */
proto.iproto.SetReward.prototype.getAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAmount()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.SetReward.prototype.setAmount = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {string}
 */
proto.iproto.SetReward.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.iproto.SetReward.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.iproto.SetReward.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.SetReward.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional RewardType type = 3;
 * @return {!proto.iproto.RewardType}
 */
proto.iproto.SetReward.prototype.getType = function() {
  return /** @type {!proto.iproto.RewardType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.iproto.RewardType} value */
proto.iproto.SetReward.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.GrantReward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.GrantReward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.GrantReward.displayName = 'proto.iproto.GrantReward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.GrantReward.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.GrantReward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.GrantReward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.GrantReward.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.GrantReward}
 */
proto.iproto.GrantReward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.GrantReward;
  return proto.iproto.GrantReward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.GrantReward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.GrantReward}
 */
proto.iproto.GrantReward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iproto.RewardType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.GrantReward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.GrantReward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.GrantReward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.GrantReward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional RewardType type = 1;
 * @return {!proto.iproto.RewardType}
 */
proto.iproto.GrantReward.prototype.getType = function() {
  return /** @type {!proto.iproto.RewardType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.iproto.RewardType} value */
proto.iproto.GrantReward.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.iproto.RewardType = {
  BLOCK: 0,
  EPOCH: 1
};

goog.object.extend(exports, proto.iproto);
