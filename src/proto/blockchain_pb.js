/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var action_pb = require('./action_pb.js');
var endorsement_pb = require('./endorsement_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.iotextypes.AccountMeta', null, global);
goog.exportSymbol('proto.iotextypes.Block', null, global);
goog.exportSymbol('proto.iotextypes.BlockFooter', null, global);
goog.exportSymbol('proto.iotextypes.BlockHeader', null, global);
goog.exportSymbol('proto.iotextypes.BlockMeta', null, global);
goog.exportSymbol('proto.iotextypes.Candidate', null, global);
goog.exportSymbol('proto.iotextypes.CandidateList', null, global);
goog.exportSymbol('proto.iotextypes.ChainMeta', null, global);
goog.exportSymbol('proto.iotextypes.Receipts', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.BlockHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.BlockHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.BlockHeader.displayName = 'proto.iotextypes.BlockHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.BlockHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.BlockHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.BlockHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    prevblockhash: msg.getPrevblockhash_asB64(),
    txroot: msg.getTxroot_asB64(),
    stateroot: msg.getStateroot_asB64(),
    deltastatedigest: msg.getDeltastatedigest_asB64(),
    receiptroot: msg.getReceiptroot_asB64(),
    reserved: msg.getReserved_asB64(),
    signature: msg.getSignature_asB64(),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.BlockHeader}
 */
proto.iotextypes.BlockHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.BlockHeader;
  return proto.iotextypes.BlockHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.BlockHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.BlockHeader}
 */
proto.iotextypes.BlockHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevblockhash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxroot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateroot(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeltastatedigest(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptroot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReserved(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.BlockHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.BlockHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPrevblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTxroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getStateroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getDeltastatedigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getReceiptroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getReserved_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.iotextypes.BlockHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotextypes.BlockHeader.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 chainID = 2;
 * @return {number}
 */
proto.iotextypes.BlockHeader.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iotextypes.BlockHeader.prototype.setChainid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 height = 3;
 * @return {number}
 */
proto.iotextypes.BlockHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iotextypes.BlockHeader.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iotextypes.BlockHeader.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iotextypes.BlockHeader.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.iotextypes.BlockHeader.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotextypes.BlockHeader.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes prevBlockHash = 5;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getPrevblockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes prevBlockHash = 5;
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getPrevblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevblockhash()));
};


/**
 * optional bytes prevBlockHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getPrevblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setPrevblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes txRoot = 6;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getTxroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes txRoot = 6;
 * This is a type-conversion wrapper around `getTxroot()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getTxroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxroot()));
};


/**
 * optional bytes txRoot = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxroot()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getTxroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setTxroot = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes stateRoot = 7;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getStateroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes stateRoot = 7;
 * This is a type-conversion wrapper around `getStateroot()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getStateroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateroot()));
};


/**
 * optional bytes stateRoot = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateroot()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getStateroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setStateroot = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes deltaStateDigest = 8;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getDeltastatedigest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes deltaStateDigest = 8;
 * This is a type-conversion wrapper around `getDeltastatedigest()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getDeltastatedigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeltastatedigest()));
};


/**
 * optional bytes deltaStateDigest = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeltastatedigest()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getDeltastatedigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeltastatedigest()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setDeltastatedigest = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes receiptRoot = 9;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getReceiptroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes receiptRoot = 9;
 * This is a type-conversion wrapper around `getReceiptroot()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getReceiptroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptroot()));
};


/**
 * optional bytes receiptRoot = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptroot()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getReceiptroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setReceiptroot = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes reserved = 10;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getReserved = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes reserved = 10;
 * This is a type-conversion wrapper around `getReserved()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getReserved_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReserved()));
};


/**
 * optional bytes reserved = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReserved()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getReserved_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReserved()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setReserved = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes signature = 11;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes signature = 11;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes pubkey = 12;
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes pubkey = 12;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.iotextypes.BlockHeader.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockHeader.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.BlockHeader.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.BlockFooter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.BlockFooter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.BlockFooter.displayName = 'proto.iotextypes.BlockFooter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.BlockFooter.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.BlockFooter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.BlockFooter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockFooter.toObject = function(includeInstance, msg) {
  var f, obj = {
    committimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endorsements: (f = msg.getEndorsements()) && endorsement_pb.EndorsementSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.BlockFooter}
 */
proto.iotextypes.BlockFooter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.BlockFooter;
  return proto.iotextypes.BlockFooter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.BlockFooter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.BlockFooter}
 */
proto.iotextypes.BlockFooter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommittimestamp(value);
      break;
    case 2:
      var value = new endorsement_pb.EndorsementSet;
      reader.readMessage(value,endorsement_pb.EndorsementSet.deserializeBinaryFromReader);
      msg.setEndorsements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockFooter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.BlockFooter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.BlockFooter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockFooter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommittimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndorsements();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      endorsement_pb.EndorsementSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 CommitTimestamp = 1;
 * @return {number}
 */
proto.iotextypes.BlockFooter.prototype.getCommittimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotextypes.BlockFooter.prototype.setCommittimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EndorsementSet endorsements = 2;
 * @return {?proto.iotextypes.EndorsementSet}
 */
proto.iotextypes.BlockFooter.prototype.getEndorsements = function() {
  return /** @type{?proto.iotextypes.EndorsementSet} */ (
    jspb.Message.getWrapperField(this, endorsement_pb.EndorsementSet, 2));
};


/** @param {?proto.iotextypes.EndorsementSet|undefined} value */
proto.iotextypes.BlockFooter.prototype.setEndorsements = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.iotextypes.BlockFooter.prototype.clearEndorsements = function() {
  this.setEndorsements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotextypes.BlockFooter.prototype.hasEndorsements = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.Block.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.Block.displayName = 'proto.iotextypes.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.Block.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.iotextypes.BlockHeader.toObject(includeInstance, f),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    action_pb.Action.toObject, includeInstance),
    footer: (f = msg.getFooter()) && proto.iotextypes.BlockFooter.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.Block}
 */
proto.iotextypes.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.Block;
  return proto.iotextypes.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.Block}
 */
proto.iotextypes.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iotextypes.BlockHeader;
      reader.readMessage(value,proto.iotextypes.BlockHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new action_pb.Action;
      reader.readMessage(value,action_pb.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 3:
      var value = new proto.iotextypes.BlockFooter;
      reader.readMessage(value,proto.iotextypes.BlockFooter.deserializeBinaryFromReader);
      msg.setFooter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.iotextypes.BlockHeader.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      action_pb.Action.serializeBinaryToWriter
    );
  }
  f = message.getFooter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.iotextypes.BlockFooter.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlockHeader header = 1;
 * @return {?proto.iotextypes.BlockHeader}
 */
proto.iotextypes.Block.prototype.getHeader = function() {
  return /** @type{?proto.iotextypes.BlockHeader} */ (
    jspb.Message.getWrapperField(this, proto.iotextypes.BlockHeader, 1));
};


/** @param {?proto.iotextypes.BlockHeader|undefined} value */
proto.iotextypes.Block.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.iotextypes.Block.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotextypes.Block.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Action actions = 2;
 * @return {!Array<!proto.iotextypes.Action>}
 */
proto.iotextypes.Block.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.iotextypes.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, action_pb.Action, 2));
};


/** @param {!Array<!proto.iotextypes.Action>} value */
proto.iotextypes.Block.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.iotextypes.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.Action}
 */
proto.iotextypes.Block.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.iotextypes.Action, opt_index);
};


proto.iotextypes.Block.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * optional BlockFooter footer = 3;
 * @return {?proto.iotextypes.BlockFooter}
 */
proto.iotextypes.Block.prototype.getFooter = function() {
  return /** @type{?proto.iotextypes.BlockFooter} */ (
    jspb.Message.getWrapperField(this, proto.iotextypes.BlockFooter, 3));
};


/** @param {?proto.iotextypes.BlockFooter|undefined} value */
proto.iotextypes.Block.prototype.setFooter = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.iotextypes.Block.prototype.clearFooter = function() {
  this.setFooter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotextypes.Block.prototype.hasFooter = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.Receipts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.Receipts.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.Receipts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.Receipts.displayName = 'proto.iotextypes.Receipts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.Receipts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.Receipts.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.Receipts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.Receipts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Receipts.toObject = function(includeInstance, msg) {
  var f, obj = {
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    action_pb.Receipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.Receipts}
 */
proto.iotextypes.Receipts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.Receipts;
  return proto.iotextypes.Receipts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.Receipts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.Receipts}
 */
proto.iotextypes.Receipts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new action_pb.Receipt;
      reader.readMessage(value,action_pb.Receipt.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.Receipts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.Receipts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.Receipts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Receipts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      action_pb.Receipt.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Receipt receipts = 1;
 * @return {!Array<!proto.iotextypes.Receipt>}
 */
proto.iotextypes.Receipts.prototype.getReceiptsList = function() {
  return /** @type{!Array<!proto.iotextypes.Receipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, action_pb.Receipt, 1));
};


/** @param {!Array<!proto.iotextypes.Receipt>} value */
proto.iotextypes.Receipts.prototype.setReceiptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iotextypes.Receipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.Receipt}
 */
proto.iotextypes.Receipts.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iotextypes.Receipt, opt_index);
};


proto.iotextypes.Receipts.prototype.clearReceiptsList = function() {
  this.setReceiptsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.Candidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.Candidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.Candidate.displayName = 'proto.iotextypes.Candidate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.Candidate.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.Candidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.Candidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Candidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    votes: msg.getVotes_asB64(),
    pubkey: msg.getPubkey_asB64(),
    creationheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastupdateheight: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.Candidate}
 */
proto.iotextypes.Candidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.Candidate;
  return proto.iotextypes.Candidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.Candidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.Candidate}
 */
proto.iotextypes.Candidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotes(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreationheight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastupdateheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.Candidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.Candidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.Candidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.Candidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVotes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCreationheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLastupdateheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.iotextypes.Candidate.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iotextypes.Candidate.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes votes = 2;
 * @return {string}
 */
proto.iotextypes.Candidate.prototype.getVotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes votes = 2;
 * This is a type-conversion wrapper around `getVotes()`
 * @return {string}
 */
proto.iotextypes.Candidate.prototype.getVotes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotes()));
};


/**
 * optional bytes votes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotes()`
 * @return {!Uint8Array}
 */
proto.iotextypes.Candidate.prototype.getVotes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotes()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.Candidate.prototype.setVotes = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pubKey = 3;
 * @return {string}
 */
proto.iotextypes.Candidate.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pubKey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.iotextypes.Candidate.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.iotextypes.Candidate.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotextypes.Candidate.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 creationHeight = 4;
 * @return {number}
 */
proto.iotextypes.Candidate.prototype.getCreationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iotextypes.Candidate.prototype.setCreationheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 lastUpdateHeight = 5;
 * @return {number}
 */
proto.iotextypes.Candidate.prototype.getLastupdateheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.iotextypes.Candidate.prototype.setLastupdateheight = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.CandidateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.CandidateList.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.CandidateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.CandidateList.displayName = 'proto.iotextypes.CandidateList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.CandidateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.CandidateList.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.CandidateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.CandidateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.CandidateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidatesList: jspb.Message.toObjectList(msg.getCandidatesList(),
    proto.iotextypes.Candidate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.CandidateList}
 */
proto.iotextypes.CandidateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.CandidateList;
  return proto.iotextypes.CandidateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.CandidateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.CandidateList}
 */
proto.iotextypes.CandidateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iotextypes.Candidate;
      reader.readMessage(value,proto.iotextypes.Candidate.deserializeBinaryFromReader);
      msg.addCandidates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.CandidateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.CandidateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.CandidateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.CandidateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iotextypes.Candidate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Candidate candidates = 1;
 * @return {!Array<!proto.iotextypes.Candidate>}
 */
proto.iotextypes.CandidateList.prototype.getCandidatesList = function() {
  return /** @type{!Array<!proto.iotextypes.Candidate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iotextypes.Candidate, 1));
};


/** @param {!Array<!proto.iotextypes.Candidate>} value */
proto.iotextypes.CandidateList.prototype.setCandidatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iotextypes.Candidate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.Candidate}
 */
proto.iotextypes.CandidateList.prototype.addCandidates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iotextypes.Candidate, opt_index);
};


proto.iotextypes.CandidateList.prototype.clearCandidatesList = function() {
  this.setCandidatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.ChainMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.ChainMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.ChainMeta.displayName = 'proto.iotextypes.ChainMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.ChainMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.ChainMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.ChainMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.ChainMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    supply: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numactions: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tps: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.ChainMeta}
 */
proto.iotextypes.ChainMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.ChainMeta;
  return proto.iotextypes.ChainMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.ChainMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.ChainMeta}
 */
proto.iotextypes.ChainMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupply(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumactions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.ChainMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.ChainMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.ChainMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.ChainMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSupply();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumactions();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTps();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional uint64 height = 1;
 * @return {number}
 */
proto.iotextypes.ChainMeta.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotextypes.ChainMeta.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string supply = 2;
 * @return {string}
 */
proto.iotextypes.ChainMeta.prototype.getSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iotextypes.ChainMeta.prototype.setSupply = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 numActions = 3;
 * @return {number}
 */
proto.iotextypes.ChainMeta.prototype.getNumactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iotextypes.ChainMeta.prototype.setNumactions = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 tps = 4;
 * @return {number}
 */
proto.iotextypes.ChainMeta.prototype.getTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iotextypes.ChainMeta.prototype.setTps = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.BlockMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.BlockMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.BlockMeta.displayName = 'proto.iotextypes.BlockMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.BlockMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.BlockMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.BlockMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numactions: jspb.Message.getFieldWithDefault(msg, 4, 0),
    produceraddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transferamount: jspb.Message.getFieldWithDefault(msg, 6, ""),
    txroot: jspb.Message.getFieldWithDefault(msg, 7, ""),
    receiptroot: jspb.Message.getFieldWithDefault(msg, 8, ""),
    deltastatedigest: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.BlockMeta}
 */
proto.iotextypes.BlockMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.BlockMeta;
  return proto.iotextypes.BlockMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.BlockMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.BlockMeta}
 */
proto.iotextypes.BlockMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumactions(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduceraddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferamount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxroot(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiptroot(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeltastatedigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.BlockMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.BlockMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.BlockMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.BlockMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNumactions();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getProduceraddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransferamount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTxroot();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReceiptroot();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDeltastatedigest();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.iotextypes.BlockMeta.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iotextypes.BlockMeta.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.iotextypes.BlockMeta.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iotextypes.BlockMeta.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 numActions = 4;
 * @return {number}
 */
proto.iotextypes.BlockMeta.prototype.getNumactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iotextypes.BlockMeta.prototype.setNumactions = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string producerAddress = 5;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getProduceraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setProduceraddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string transferAmount = 6;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getTransferamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setTransferamount = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string txRoot = 7;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getTxroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setTxroot = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string receiptRoot = 8;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getReceiptroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setReceiptroot = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string deltaStateDigest = 9;
 * @return {string}
 */
proto.iotextypes.BlockMeta.prototype.getDeltastatedigest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.iotextypes.BlockMeta.prototype.setDeltastatedigest = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.AccountMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.AccountMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotextypes.AccountMeta.displayName = 'proto.iotextypes.AccountMeta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.AccountMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.AccountMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.AccountMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.AccountMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pendingnonce: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.AccountMeta}
 */
proto.iotextypes.AccountMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.AccountMeta;
  return proto.iotextypes.AccountMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.AccountMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.AccountMeta}
 */
proto.iotextypes.AccountMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPendingnonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.AccountMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.AccountMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.AccountMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.AccountMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPendingnonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.iotextypes.AccountMeta.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.iotextypes.AccountMeta.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string balance = 2;
 * @return {string}
 */
proto.iotextypes.AccountMeta.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iotextypes.AccountMeta.prototype.setBalance = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.iotextypes.AccountMeta.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iotextypes.AccountMeta.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 pendingNonce = 4;
 * @return {number}
 */
proto.iotextypes.AccountMeta.prototype.getPendingnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.iotextypes.AccountMeta.prototype.setPendingnonce = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.iotextypes);
