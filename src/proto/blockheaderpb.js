/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.iproto.BlockHeaderPb');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Timestamp');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iproto.BlockHeaderPb = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iproto.BlockHeaderPb, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iproto.BlockHeaderPb.displayName = 'proto.iproto.BlockHeaderPb';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iproto.BlockHeaderPb.prototype.toObject = function(opt_includeInstance) {
  return proto.iproto.BlockHeaderPb.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iproto.BlockHeaderPb} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.BlockHeaderPb.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
    prevblockhash: msg.getPrevblockhash_asB64(),
    txroot: msg.getTxroot_asB64(),
    stateroot: msg.getStateroot_asB64(),
    deltastatedigest: msg.getDeltastatedigest_asB64(),
    receiptroot: msg.getReceiptroot_asB64(),
    reserved: msg.getReserved_asB64(),
    signature: msg.getSignature_asB64(),
    pubkey: msg.getPubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iproto.BlockHeaderPb}
 */
proto.iproto.BlockHeaderPb.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iproto.BlockHeaderPb;
  return proto.iproto.BlockHeaderPb.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iproto.BlockHeaderPb} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iproto.BlockHeaderPb}
 */
proto.iproto.BlockHeaderPb.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 4:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevblockhash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxroot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStateroot(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeltastatedigest(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReceiptroot(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReserved(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iproto.BlockHeaderPb.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iproto.BlockHeaderPb} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iproto.BlockHeaderPb.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChainid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPrevblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTxroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getStateroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getDeltastatedigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getReceiptroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getReserved_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.iproto.BlockHeaderPb.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iproto.BlockHeaderPb.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 chainID = 2;
 * @return {number}
 */
proto.iproto.BlockHeaderPb.prototype.getChainid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iproto.BlockHeaderPb.prototype.setChainid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 height = 3;
 * @return {number}
 */
proto.iproto.BlockHeaderPb.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iproto.BlockHeaderPb.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iproto.BlockHeaderPb.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iproto.BlockHeaderPb.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.iproto.BlockHeaderPb.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iproto.BlockHeaderPb.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes prevBlockHash = 5;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getPrevblockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes prevBlockHash = 5;
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getPrevblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevblockhash()));
};


/**
 * optional bytes prevBlockHash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevblockhash()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getPrevblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setPrevblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes txRoot = 6;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getTxroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes txRoot = 6;
 * This is a type-conversion wrapper around `getTxroot()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getTxroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxroot()));
};


/**
 * optional bytes txRoot = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxroot()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getTxroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setTxroot = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes stateRoot = 7;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getStateroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes stateRoot = 7;
 * This is a type-conversion wrapper around `getStateroot()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getStateroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStateroot()));
};


/**
 * optional bytes stateRoot = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStateroot()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getStateroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStateroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setStateroot = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes deltaStateDigest = 8;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getDeltastatedigest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes deltaStateDigest = 8;
 * This is a type-conversion wrapper around `getDeltastatedigest()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getDeltastatedigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeltastatedigest()));
};


/**
 * optional bytes deltaStateDigest = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeltastatedigest()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getDeltastatedigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeltastatedigest()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setDeltastatedigest = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes receiptRoot = 9;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getReceiptroot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes receiptRoot = 9;
 * This is a type-conversion wrapper around `getReceiptroot()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getReceiptroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReceiptroot()));
};


/**
 * optional bytes receiptRoot = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReceiptroot()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getReceiptroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReceiptroot()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setReceiptroot = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes reserved = 10;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getReserved = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes reserved = 10;
 * This is a type-conversion wrapper around `getReserved()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getReserved_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReserved()));
};


/**
 * optional bytes reserved = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReserved()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getReserved_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReserved()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setReserved = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes signature = 11;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes signature = 11;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes pubkey = 12;
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes pubkey = 12;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.iproto.BlockHeaderPb.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.iproto.BlockHeaderPb.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.iproto.BlockHeaderPb.prototype.setPubkey = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


